{"version":3,"sources":["components/home/ProjectCard.jsx","components/home/Project.jsx"],"names":["CardButtons","svn_url","href","className","target","Language","languages_url","repo_url","useState","data","setData","handleRequest","useCallback","a","axios","get","response","console","error","message","useEffect","array","total_count","index","push","length","map","language","key","Math","trunc","CardFooter","star_count","pushed_at","updated_at","setUpdated_at","handleUpdatetime","date","Date","diff","getTime","hours","measurement","toString","time","Intl","DateTimeFormat","day","month","year","format","ProjectCard","value","name","description","stargazers_count","Col","md","Card","Body","Title","as","Text","count","dummyProject","API","Project","heading","username","specfic","allReposAPI","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","sort","b","slice","repoName","Jumbotron","fluid","id","Container","Row","project"],"mappings":"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","file":"static/js/12.b755e4be.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport axios from \"axios\";\r\n\r\nconst ProjectCard = ({ value }) => {\r\n  const {\r\n    name,\r\n    description,\r\n    svn_url,\r\n    stargazers_count,\r\n    languages_url,\r\n    pushed_at,\r\n  } = value;\r\n  return (\r\n    <Col md={6}>\r\n      <Card className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\r\n        <Card.Body>\r\n          <Card.Title as=\"h5\">{name || <Skeleton />} </Card.Title>\r\n          <Card.Text>{(!description)?\"\":description || <Skeleton count={3} />} </Card.Text>\r\n          {svn_url ? <CardButtons svn_url={svn_url} /> : <Skeleton count={2} />}\r\n          <hr />\r\n          {languages_url ? (\r\n            <Language languages_url={languages_url} repo_url={svn_url} />\r\n          ) : (\r\n            <Skeleton count={3} />\r\n          )}\r\n          {value ? (\r\n            <CardFooter star_count={stargazers_count} repo_url={svn_url} pushed_at={pushed_at} />\r\n          ) : (\r\n            <Skeleton />\r\n          )}\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nconst CardButtons = ({ svn_url }) => {\r\n  return (\r\n    <>\r\n      <a\r\n        href={`${svn_url}/archive/master.zip`}\r\n        className=\"btn btn-outline-secondary mr-3\"\r\n      >\r\n        <i className=\"fab fa-github\" /> Clone Project\r\n      </a>\r\n      <a href={svn_url} target=\" _blank\" className=\"btn btn-outline-secondary\">\r\n        <i className=\"fab fa-github\" /> Repo\r\n      </a>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Language = ({ languages_url, repo_url }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleRequest = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(languages_url);\r\n      return setData(response.data);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }, [languages_url]);\r\n\r\n  useEffect(() => {\r\n    handleRequest();\r\n  }, [handleRequest]);\r\n\r\n  const array = [];\r\n  let total_count = 0;\r\n  for (let index in data) {\r\n    array.push(index);\r\n    total_count += data[index];\r\n  }\r\n\r\n  return (\r\n    <div className=\"pb-3\">\r\n      Languages:{\" \"}\r\n      {array.length\r\n        ? array.map((language) => (\r\n            <a\r\n              key={language} \r\n              className=\"badge badge-light card-link\"\r\n              href={repo_url + `/search?l=${language}`}\r\n              target=\" _blank\"\r\n            >\r\n              {language}:{\" \"}\r\n              {Math.trunc((data[language] / total_count) * 1000) / 10} %\r\n            </a>\r\n          ))\r\n        : \"code yet to be deployed.\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CardFooter = ({ star_count, repo_url, pushed_at }) => {\r\n  const [updated_at, setUpdated_at] = useState(\"0 mints\");\r\n\r\n  const handleUpdatetime = useCallback(() => {\r\n    const date = new Date(pushed_at);\r\n    const nowdate = new Date();\r\n    const diff = nowdate.getTime() - date.getTime();\r\n    const hours = Math.trunc(diff / 1000 / 60 / 60);\r\n\r\n    if (hours < 24) {\r\n      if (hours < 1) return setUpdated_at(\"just now\");\r\n      let measurement = hours === 1 ? \"hour\" : \"hours\";\r\n      return setUpdated_at(`${hours.toString()} ${measurement} ago`);\r\n    } else {\r\n      const options = { day: \"numeric\", month: \"long\", year: \"numeric\" };\r\n      const time = new Intl.DateTimeFormat(\"en-US\", options).format(date);\r\n      return setUpdated_at(`on ${time}`);\r\n    }\r\n  }, [pushed_at]);\r\n\r\n  useEffect(() => {\r\n    handleUpdatetime();\r\n  }, [handleUpdatetime]);\r\n\r\n  return (\r\n    <p className=\"card-text\">\r\n      <a\r\n        href={repo_url + \"/stargazers\"}\r\n        target=\" _blank\"\r\n        className=\"text-dark text-decoration-none\"\r\n      >\r\n        <span className=\"text-dark card-link mr-4\">\r\n          <i className=\"fab fa-github\" /> Stars{\" \"}\r\n          <span className=\"badge badge-dark\">{star_count}</span>\r\n        </span>\r\n      </a>\r\n      <small className=\"text-muted\">Updated {updated_at}</small>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport axios from \"axios\";\r\n\r\nconst dummyProject = {\r\n  name: null,\r\n  description: null,\r\n  svn_url: null,\r\n  stargazers_count: null,\r\n  languages_url: null,\r\n  pushed_at: null,\r\n};\r\nconst API = \"https://api.github.com\";\r\n\r\nconst Project = ({ heading, username, length, specfic }) => {\r\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\r\n  const specficReposAPI = `${API}/repos/${username}`;\r\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\r\n    dummyProject\r\n  );\r\n\r\n  const [projectsArray, setProjectsArray] = useState([]);\r\n\r\n  const fetchRepos = useCallback(async () => {\r\n    let repoList = [];\r\n    try {\r\n      // getting all repos\r\n      const response = await axios.get(allReposAPI);\r\n      // order by stargazers\r\n      response.data.sort((a, b) => {\r\n        return b.stargazers_count - a.stargazers_count;\r\n      })\r\n\r\n      // slicing to the length\r\n      repoList = [...response.data.slice(0, length)];\r\n      // adding specified repos\r\n      try {\r\n        for (let repoName of specfic) {\r\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\r\n          repoList.push(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error.message);\r\n      }\r\n      // setting projectArray\r\n      // TODO: remove the duplication.\r\n      setProjectsArray(repoList);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  }, [allReposAPI, length, specfic, specficReposAPI]);\r\n\r\n  useEffect(() => {\r\n    fetchRepos();\r\n  }, [fetchRepos]);\r\n\r\n  return (\r\n    <Jumbotron fluid id=\"projects\" className=\"bg-light m-0\">\r\n      <Container className=\"\">\r\n        <h2 className=\"display-4 pb-5 text-center\">{heading}</h2>\r\n        <Row>\r\n          {projectsArray.length\r\n            ? projectsArray.map((project, index) => (\r\n                <ProjectCard\r\n                  key={`project-card-${index}`}\r\n                  id={`project-card-${index}`}\r\n                  value={project}\r\n                />\r\n              ))\r\n            : dummyProjectsArr.map((project, index) => (\r\n                <ProjectCard\r\n                  key={`dummy-${index}`}\r\n                  id={`dummy-${index}`}\r\n                  value={project}\r\n                />\r\n              ))}\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"],"sourceRoot":""}