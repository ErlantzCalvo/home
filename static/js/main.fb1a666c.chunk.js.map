{"version":3,"sources":["editable-stuff/config.js","editable-stuff/erlantzcalvo.webp","editable-stuff/resume.pdf","App.js","serviceWorker.js","index.js"],"names":["navBar","show","mainBody","gradientColors","firstName","middleName","lastName","message","icons","image","url","about","heading","imageLink","require","imageSize","resume","projects","projectsDetails","name","stack","description","technical_details","repos","gitHubUsername","reposLength","specificRepos","skills","hardSkills","value","softSkills","getInTouch","email","module","exports","MainBody","lazy","AboutMe","Project","Github","Footer","Navbar","Skills","GetInTouch","Home","React","forwardRef","props","ref","createElement","Fragment","gradient","title","concat","link","imgSize","username","length","specfic","App","titleRef","useRef","BrowserRouter","basename","process","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb1a666c.chunk.js","sourcesContent":["// Navigation Bar SECTION\nconst navBar = {\n  show: true,\n};\n\n// Main Body SECTION\nconst mainBody = {\n  gradientColors: \"#4484ce, #1ad7c0, #ff9b11, #9b59b6, #ff7f7f, #ecf0f1\",\n  firstName: \"Erlantz\",\n  middleName: \"\",\n  lastName: \"Calvo\",\n  message: \" Seeking to improve lives through the use of technology. \",\n  icons: [\n    {\n      image: \"fa-github\",\n      url: \"https://github.com/ErlantzCalvo\",\n    },\n    {\n      image: \"fa-linkedin\",\n      url: \"https://www.linkedin.com/in/erlantzcalvo/\",\n    },\n    // {\n    //   image: \"fa-twitter\",\n    //   url: \"https://www.twitter.com/hashirshoaeb/\",\n    // },\n  ],\n};\n\n// ABOUT SECTION\n// If you want the About Section to show a profile picture you can fill the profilePictureLink either with:\n//a) your Instagram username\n//      i.e:profilePictureLink:\"johnDoe123\",\n//b) a link to an hosted image\n//      i.e:profilePictureLink:\"www.picturesonline.com/johnDoeFancyAvatar.jpg\",\n//c) image in \"editable-stuff\" directory and use require(\"\") to import here,\n//      i.e: profilePictureLink: require(\"../editable-stuff/hashirshoaeb.png\"),\n//d) If you do not want any picture to be displayed, just leave it empty :)\n//      i.e: profilePictureLink: \"\",\n// For Resume either provide link to your resume or import from \"editable-stuff\" directory\n//     i.e resume: require(\"../editable-stuff/resume.pdf\"),\n//         resume: \"https://docs.google.com/document/d/13_PWdhThMr6roxb-UFiJj4YAFOj8e_bv3Vx9UHQdyBQ/edit?usp=sharing\",\n\nconst about = {\n  show: true,\n  heading: \"About Me\",\n  imageLink: require(\"../editable-stuff/erlantzcalvo.webp\"),\n  imageSize: 275,\n  message:\n    \"My name is Erlantz Calvo. Iâ€™m a graduate of 2021 from University of the Basque Country with a degree in Computer Science. I am passionate about all fields of computer science, currently working as fullstack developer.\",\n  resume: require(\"../editable-stuff/resume.pdf\"),\n};\n\nconst projects = {\n  show: true,\n  heading: \"Live Projects\", \n  projectsDetails: [\n    {\n      name: \"HayQueVivir\",\n      url: \"https://hay-que-vivir.vercel.app\",\n      image: \"HayQueVivir.jpg\",\n      stack: [\"Go\", \"Next.js\", \"Tailwind\", \"Firebase\"],\n      description: \"Keep track of house prices in the different provinces of Spain with daily updated prices.\",\n      technical_details: \"This project is separated into two different parts:\\nOn the one hand there is a process made with Golang that is in charge of obtaining the statistics of the daily house prices as well as the Euribor. Both data are obtained through the use of webscraping and are stored in Firestore.\\nOn the other hand, there is the web that users see, which is a web application created with Next.js that obtains the data saved by the webscraper in Firestore.\\nNote: Since this website is intended for use by Spaniards, it has not been translated into other languages.\"\n    },\n    {\n      name: \"F1-corner\",\n      url: \"https://f1-corner-iota.vercel.app\",\n      image: \"F1-corner.jpg\",\n      stack: [\"Astro\"],\n      description: \"Keep up to date with the formula 1 results\",\n      technical_details: \"This website has been built with the Astro web framework in order to create the best possible user experience.\\nIt is a completely static web page, which means that it does not load content dynamically. so you may ask, how do you keep your content up to date?\\nIf you follow the F1, you may know that all races are held on Sundays so, via a Github action, the page is built every Monday after a race.Although I already knew that this is not the best way to create a web page that consumes dynamic content from an API, the idea was to create a completely static page without the need to load any content.\"\n    }\n  ],\n};\n\n// GITHUB SECTION\n// Setting up project lenght will automatically fetch your that number of recently updated projects, or you can set this field 0 to show none.\n//      i.e: reposLength: 0,\n// If you want to display specfic projects, add the repository names,\n//      i.e [\"repository-1\", \"repo-2\"]\nconst repos = {\n  show: true,\n  heading: \"Github Projects\",\n  gitHubUsername: \"ErlantzCalvo\", \n  reposLength: 4,\n  specificRepos: [],\n};\n\n// SKILLS SECTION\nconst skills = {\n  show: false,\n  heading: \"Skills\",\n  hardSkills: [\n    { name: \"Python\", value: 90 },\n    { name: \"SQL\", value: 70 },\n    { name: \"Data Structures\", value: 80 },\n    { name: \"C/C++\", value: 45 },\n    { name: \"JavaScript\", value: 85 },\n    { name: \"React\", value: 40 },\n    { name: \"HTML/CSS\", value: 85 },\n    { name: \"C#\", value: 85 },\n  ],\n  softSkills: [\n    { name: \"Goal-Oriented\", value: 80 },\n    { name: \"Collaboration\", value: 90 },\n    { name: \"Positivity\", value: 75 },\n    { name: \"Adaptability\", value: 85 },\n    { name: \"Problem Solving\", value: 80 },\n    { name: \"Empathy\", value: 90 },\n    // { name: \"Organization\", value: 60 },\n    { name: \"Creativity\", value: 90 },\n  ],\n};\n\n// GET IN TOUCH SECTION\nconst getInTouch = {\n  show: true,\n  heading: \"Get In Touch\",\n  message:\n    \"You can contact me via email: \",\n  email: \"erlantzcalvocarrillo@gmail.com\",\n};\n\n\nexport { navBar, mainBody, about, projects, repos, skills, /*leadership,*/ getInTouch/*, experiences*/ };\n","module.exports = __webpack_public_path__ + \"static/media/erlantzcalvo.0ae2f690.webp\";","module.exports = __webpack_public_path__ + \"static/media/resume.585642a7.pdf\";","import React, {lazy} from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport {\n  navBar,\n  mainBody,\n  about,\n  projects,\n  repos,\n  skills,\n  getInTouch,\n} from \"./editable-stuff/config.js\";\n\nconst MainBody = lazy(()=> import('./components/home/MainBody'))\nconst AboutMe = lazy(()=> import('./components/home/AboutMe'))\nconst Project = lazy(()=> import('./components/home/Project.jsx'))\nconst Github = lazy(()=> import('./components/home/Github.jsx'))\nconst Footer = lazy(()=> import('./components/Footer'))\nconst Navbar = lazy(()=> import('./components/Navbar'))\nconst Skills = lazy(()=> import('./components/home/Skills'))\nconst GetInTouch = lazy(()=> import('./components/home/GetInTouch.jsx'))\n\nconst Home = React.forwardRef((props, ref) => {\n  return (\n    <>\n      <MainBody\n        gradient={mainBody.gradientColors}\n        title={`${mainBody.firstName} ${mainBody.middleName} ${mainBody.lastName}`}\n        message={mainBody.message}\n        icons={mainBody.icons}\n        ref={ref}\n      />\n      {about.show && (\n        <AboutMe\n          heading={about.heading}\n          message={about.message}\n          link={about.imageLink}\n          imgSize={about.imageSize}\n          resume={about.resume}\n        />\n      )}\n      {projects.show && (\n        <Project\n          heading={projects.heading}\n          // length={projects.reposLength}\n          projects={projects.projectsDetails}\n        />\n      )}\n      {repos.show && (\n        <Github\n          heading={repos.heading}\n          username={repos.gitHubUsername}\n          length={repos.reposLength}\n          specfic={repos.specificRepos}\n        />\n      )}\n      {skills.show && (\n        <Skills\n          heading={skills.heading}\n          hardSkills={skills.hardSkills}\n          softSkills={skills.softSkills}\n        />\n      )}\n      </>\n  );\n});\n\nconst App = () => {\n  const titleRef = React.useRef();\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL + \"/\"}>\n      {navBar.show && <Navbar ref={titleRef} />}\n      <Route path=\"/\" exact component={() => <Home ref={titleRef} />} />\n      <Footer>\n        {getInTouch.show && (\n          <GetInTouch\n            heading={getInTouch.heading}\n            message={getInTouch.message}\n            email={getInTouch.email}\n          />\n        )}\n      </Footer>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/custom.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Suspense } from \"react\";\n\nReactDOM.render(<Suspense fallback={<p>loading...</p>}> <App /></Suspense>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}